datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes", "referentialActions"]
}

// model
model Users {
  id                String              @id @default(uuid())
  name              String
  mail              String              @unique
  status            EnrollmentStatus    @default(ENROLLMENT)
  UserTask          UserTaskStatus[]
  UserBelongingPair UserBelongingPair[]
}

enum EnrollmentStatus {
  ENROLLMENT
  RECESS
  LEFT
}

model Tasks {
  id       String           @id @default(uuid())
  title    String           @unique
  content  String
  UserTask UserTaskStatus[]
}

model UserTaskStatus {
  status ProgressStatus @default(TODO)
  userId String
  taskId String
  User   Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Task   Tasks          @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([userId, taskId])
}

enum ProgressStatus {
  TODO
  REVIEWING
  DONE
}

model Pairs {
  id                String              @id @default(uuid())
  name              String              @db.Char(1)
  UserBelongingPair UserBelongingPair[]
  PairBelongingTeam PairBelongingTeam[]
}

model UserBelongingPair {
  userId String
  pairId String
  User   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Pair   Pairs  @relation(fields: [pairId], references: [id], onDelete: Cascade)

  @@id([userId, pairId])
}

model Teams {
  id                String              @id @default(uuid())
  name              String              @db.Char(3)
  PairBelongingTeam PairBelongingTeam[]
}

model PairBelongingTeam {
  pairId String
  teamId String
  Pair   Pairs  @relation(fields: [pairId], references: [id], onDelete: Cascade)
  Team   Teams  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([pairId, teamId])
}
